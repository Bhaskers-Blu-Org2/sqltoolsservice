// This file was generated by a T4 Template. Do not modify directly, instead update the KustoQueryModelDefinition.xml file
// and re-run the T4 template. This can be done in Visual Studio by right-click in and choosing "Run Custom Tool",
// or from the command-line on any platform by running "build.cmd -Target=CodeGen" or "build.sh -Target=CodeGen".

using System;
using System.Collections.Generic;
using System.Composition;
using System.Linq;
using Microsoft.SqlServer.Management.Kusto;
using Microsoft.SqlServer.Management.Kusto.Broker;

namespace Microsoft.SqlTools.ServiceLayer.ObjectExplorer.KustoModel
{

    [Export(typeof(KustoQuerier))]
    internal partial class SqlDatabaseQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Database) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                var retValue = parentServer.Databases;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<Database>(retValue).Where(c => PassesFinalFilters(parentServer, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlLinkedServerLoginQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(LinkedServer) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                var retValue = parentServer.LinkedServers;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<LinkedServer>(retValue).Where(c => PassesFinalFilters(parentServer, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlLoginQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Login) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                var retValue = parentServer.Logins;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<Login>(retValue).Where(c => PassesFinalFilters(parentServer, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlServerRoleQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ServerRole) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                var retValue = parentServer.Roles;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<ServerRole>(retValue).Where(c => PassesFinalFilters(parentServer, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlCredentialQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Credential) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                var retValue = parentServer.Credentials;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<Credential>(retValue).Where(c => PassesFinalFilters(parentServer, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlCryptographicProviderQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(CryptographicProvider) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                var retValue = parentServer.CryptographicProviders;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<CryptographicProvider>(retValue).Where(c => PassesFinalFilters(parentServer, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlServerAuditQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Audit) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                var retValue = parentServer.Audits;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<Audit>(retValue).Where(c => PassesFinalFilters(parentServer, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlServerAuditSpecificationQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ServerAuditSpecification) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                var retValue = parentServer.ServerAuditSpecifications;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<ServerAuditSpecification>(retValue).Where(c => PassesFinalFilters(parentServer, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlEndpointQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Endpoint) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                var retValue = parentServer.Endpoints;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<Endpoint>(retValue).Where(c => PassesFinalFilters(parentServer, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlLinkedServerQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(LinkedServer) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                var retValue = parentServer.LinkedServers;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<LinkedServer>(retValue).Where(c => PassesFinalFilters(parentServer, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlServerDdlTriggerQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ServerDdlTrigger) };

        public override ValidForFlag ValidFor { get { return ValidForFlag.NotSqlDw; } }


        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                var retValue = parentServer.Triggers;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<ServerDdlTrigger>(retValue).Where(c => PassesFinalFilters(parentServer, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlErrorMessageQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(UserDefinedMessage) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Server parentServer = context.Parent as Server;
            if (parentServer != null)
            {
                var retValue = parentServer.UserDefinedMessages;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<UserDefinedMessage>(retValue).Where(c => PassesFinalFilters(parentServer, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlTableQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Table) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.Tables;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<Table>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlHistoryTableQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Table) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Table parentTable = context.Parent as Table;
            if (parentTable != null)
            {
                var retValue = parentTable.Parent.Tables;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<Table>(retValue).Where(c => PassesFinalFilters(parentTable, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlViewQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(View) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.Views;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<View>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlSynonymQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Synonym) };

        public override ValidForFlag ValidFor { get { return ValidForFlag.NotSqlDw; } }


        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.Synonyms;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<Synonym>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlColumnQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Column) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            TableViewTableTypeBase parentTableViewTableTypeBase = context.Parent as TableViewTableTypeBase;
            if (parentTableViewTableTypeBase != null)
            {
                var retValue = parentTableViewTableTypeBase.Columns;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<Column>(retValue).Where(c => PassesFinalFilters(parentTableViewTableTypeBase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlIndexQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Index) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            TableViewTableTypeBase parentTableViewTableTypeBase = context.Parent as TableViewTableTypeBase;
            if (parentTableViewTableTypeBase != null)
            {
                var retValue = parentTableViewTableTypeBase.Indexes;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<Index>(retValue).Where(c => PassesFinalFilters(parentTableViewTableTypeBase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlCheckQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Check) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Table parentTable = context.Parent as Table;
            if (parentTable != null)
            {
                var retValue = parentTable.Checks;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<Check>(retValue).Where(c => PassesFinalFilters(parentTable, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlForeignKeyConstraintQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ForeignKey) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Table parentTable = context.Parent as Table;
            if (parentTable != null)
            {
                var retValue = parentTable.ForeignKeys;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<ForeignKey>(retValue).Where(c => PassesFinalFilters(parentTable, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlDefaultConstraintQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(DefaultConstraint) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Table parentTable = context.Parent as Table;
            if (parentTable != null)
            {
                var retValue = parentTable.Columns;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    List<DefaultConstraint> subFieldResult = new List<DefaultConstraint>();
                    foreach(Column field in retValue)
                    {
                        DefaultConstraint subField = field.DefaultConstraint;
                        if (subField != null)
                        {
                            subFieldResult.Add(subField);
                        }
                    }
                    return subFieldResult.Where(c => PassesFinalFilters(parentTable, c));
                }
            }
            UserDefinedTableType parentUserDefinedTableType = context.Parent as UserDefinedTableType;
            if (parentUserDefinedTableType != null)
            {
                var retValue = parentUserDefinedTableType.Columns;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    List<DefaultConstraint> subFieldResult = new List<DefaultConstraint>();
                    foreach(Column field in retValue)
                    {
                        DefaultConstraint subField = field.DefaultConstraint;
                        if (subField != null)
                        {
                            subFieldResult.Add(subField);
                        }
                    }
                    return subFieldResult.Where(c => PassesFinalFilters(parentUserDefinedTableType, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlDmlTriggerQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Trigger) };

        public override ValidForFlag ValidFor { get { return ValidForFlag.NotSqlDw; } }


        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Table parentTable = context.Parent as Table;
            if (parentTable != null)
            {
                var retValue = parentTable.Triggers;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<Trigger>(retValue).Where(c => PassesFinalFilters(parentTable, c));
                }
            }
            View parentView = context.Parent as View;
            if (parentView != null)
            {
                var retValue = parentView.Triggers;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<Trigger>(retValue).Where(c => PassesFinalFilters(parentView, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlFullTextIndexQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(FullTextIndex) };

        public override ValidForFlag ValidFor { get { return ValidForFlag.NotSqlDw; } }


        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Table parentTable = context.Parent as Table;
            if (parentTable != null)
            {
                var retValue = parentTable.FullTextIndex;
                if (retValue != null)
                {
                    if (refresh)
                    {
                        parentTable.FullTextIndex.Refresh();
                    }
                    return new SqlKustoObject[] { retValue };
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlStatisticQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Statistic) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            TableViewBase parentTableViewBase = context.Parent as TableViewBase;
            if (parentTableViewBase != null)
            {
                var retValue = parentTableViewBase.Statistics;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<Statistic>(retValue).Where(c => PassesFinalFilters(parentTableViewBase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlDatabaseDdlTriggerQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(DatabaseDdlTrigger) };

        public override ValidForFlag ValidFor { get { return ValidForFlag.NotSqlDw; } }


        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.Triggers;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<DatabaseDdlTrigger>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlAssemblyQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(SqlAssembly) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.Assemblies;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<SqlAssembly>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlSequenceQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Sequence) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.Sequences;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<Sequence>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlUserDefinedDataTypeQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(UserDefinedDataType) };

        public override ValidForFlag ValidFor { get { return ValidForFlag.NotSqlDw; } }


        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.UserDefinedDataTypes;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<UserDefinedDataType>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlUserDefinedTableTypeQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(UserDefinedTableType) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.UserDefinedTableTypes;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<UserDefinedTableType>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlXmlSchemaCollectionQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(XmlSchemaCollection) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.XmlSchemaCollections;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<XmlSchemaCollection>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlUserDefinedTypeQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(UserDefinedType) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.UserDefinedTypes;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<UserDefinedType>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlUserDefinedFunctionQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(UserDefinedFunction) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.UserDefinedFunctions;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<UserDefinedFunction>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlUserDefinedAggregateQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(UserDefinedAggregate) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.UserDefinedAggregates;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<UserDefinedAggregate>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlFileGroupQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(FileGroup) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.FileGroups;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<FileGroup>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlFileQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(DataFile) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            FileGroup parentFileGroup = context.Parent as FileGroup;
            if (parentFileGroup != null)
            {
                var retValue = parentFileGroup.Files;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<DataFile>(retValue).Where(c => PassesFinalFilters(parentFileGroup, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlFullTextCatalogQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(FullTextCatalog) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.FullTextCatalogs;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<FullTextCatalog>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlFullTextStopListQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(FullTextStopList) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.FullTextStopLists;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<FullTextStopList>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlPartitionFunctionQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(PartitionFunction) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.PartitionFunctions;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<PartitionFunction>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlPartitionSchemeQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(PartitionScheme) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.PartitionSchemes;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<PartitionScheme>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlSearchPropertyListQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(SearchPropertyList) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.SearchPropertyLists;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<SearchPropertyList>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlUserQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(User) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.Users;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<User>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlSchemaQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Schema) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.Schemas;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<Schema>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlAsymmetricKeyQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(AsymmetricKey) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.AsymmetricKeys;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<AsymmetricKey>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlCertificateQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Certificate) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.Certificates;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<Certificate>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlSymmetricKeyQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(SymmetricKey) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.SymmetricKeys;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<SymmetricKey>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlDatabaseEncryptionKeyQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(DatabaseEncryptionKey) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.DatabaseEncryptionKey;
                if (retValue != null)
                {
                    if (refresh)
                    {
                        parentDatabase.DatabaseEncryptionKey.Refresh();
                    }
                    return new SqlKustoObject[] { retValue };
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlMasterKeyQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(MasterKey) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.MasterKey;
                if (retValue != null)
                {
                    if (refresh)
                    {
                        parentDatabase.MasterKey.Refresh();
                    }
                    return new SqlKustoObject[] { retValue };
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlDatabaseAuditSpecificationQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(DatabaseAuditSpecification) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.DatabaseAuditSpecifications;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<DatabaseAuditSpecification>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlSecurityPolicyQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(SecurityPolicy) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.SecurityPolicies;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<SecurityPolicy>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlDatabaseCredentialQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(DatabaseScopedCredential) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.DatabaseScopedCredentials;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<DatabaseScopedCredential>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlRoleQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(DatabaseRole) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.Roles;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<DatabaseRole>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlApplicationRoleQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ApplicationRole) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.ApplicationRoles;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<ApplicationRole>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlColumnMasterKeyQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ColumnMasterKey) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.ColumnMasterKeys;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<ColumnMasterKey>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlColumnEncryptionKeyQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ColumnEncryptionKey) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.ColumnEncryptionKeys;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<ColumnEncryptionKey>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlServiceBrokerQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ServiceBroker) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.ServiceBroker;
                if (retValue != null)
                {
                    if (refresh)
                    {
                        parentDatabase.ServiceBroker.Refresh();
                    }
                    return new SqlKustoObject[] { retValue };
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlServiceQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(BrokerService) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            ServiceBroker parentServiceBroker = context.Parent as ServiceBroker;
            if (parentServiceBroker != null)
            {
                var retValue = parentServiceBroker.Services;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<BrokerService>(retValue).Where(c => PassesFinalFilters(parentServiceBroker, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlContractQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ServiceContract) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            ServiceBroker parentServiceBroker = context.Parent as ServiceBroker;
            if (parentServiceBroker != null)
            {
                var retValue = parentServiceBroker.ServiceContracts;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<ServiceContract>(retValue).Where(c => PassesFinalFilters(parentServiceBroker, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlQueueQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ServiceQueue) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            ServiceBroker parentServiceBroker = context.Parent as ServiceBroker;
            if (parentServiceBroker != null)
            {
                var retValue = parentServiceBroker.Queues;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<ServiceQueue>(retValue).Where(c => PassesFinalFilters(parentServiceBroker, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlRemoteServiceBindingQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(RemoteServiceBinding) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            ServiceBroker parentServiceBroker = context.Parent as ServiceBroker;
            if (parentServiceBroker != null)
            {
                var retValue = parentServiceBroker.RemoteServiceBindings;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<RemoteServiceBinding>(retValue).Where(c => PassesFinalFilters(parentServiceBroker, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlBrokerPriorityQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(BrokerPriority) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            ServiceBroker parentServiceBroker = context.Parent as ServiceBroker;
            if (parentServiceBroker != null)
            {
                var retValue = parentServiceBroker.Priorities;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<BrokerPriority>(retValue).Where(c => PassesFinalFilters(parentServiceBroker, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlMessageTypeQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(MessageType) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            ServiceBroker parentServiceBroker = context.Parent as ServiceBroker;
            if (parentServiceBroker != null)
            {
                var retValue = parentServiceBroker.MessageTypes;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<MessageType>(retValue).Where(c => PassesFinalFilters(parentServiceBroker, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlExternalDataSourceQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ExternalDataSource) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.ExternalDataSources;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<ExternalDataSource>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlExternalFileFormatQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ExternalFileFormat) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.ExternalFileFormats;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<ExternalFileFormat>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlProcedureQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(StoredProcedure) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.StoredProcedures;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<StoredProcedure>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlExtendedStoredProcedureQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(ExtendedStoredProcedure) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.ExtendedStoredProcedures;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<ExtendedStoredProcedure>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlSubroutineParameterQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(Parameter) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            StoredProcedure parentStoredProcedure = context.Parent as StoredProcedure;
            if (parentStoredProcedure != null)
            {
                var retValue = parentStoredProcedure.Parameters;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<Parameter>(retValue).Where(c => PassesFinalFilters(parentStoredProcedure, c));
                }
            }
            UserDefinedAggregate parentUserDefinedAggregate = context.Parent as UserDefinedAggregate;
            if (parentUserDefinedAggregate != null)
            {
                var retValue = parentUserDefinedAggregate.Parameters;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<Parameter>(retValue).Where(c => PassesFinalFilters(parentUserDefinedAggregate, c));
                }
            }
            UserDefinedFunction parentUserDefinedFunction = context.Parent as UserDefinedFunction;
            if (parentUserDefinedFunction != null)
            {
                var retValue = parentUserDefinedFunction.Parameters;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<Parameter>(retValue).Where(c => PassesFinalFilters(parentUserDefinedFunction, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlPartitionFunctionParameterQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(PartitionFunctionParameter) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            PartitionFunction parentPartitionFunction = context.Parent as PartitionFunction;
            if (parentPartitionFunction != null)
            {
                var retValue = parentPartitionFunction.PartitionFunctionParameters;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<PartitionFunctionParameter>(retValue).Where(c => PassesFinalFilters(parentPartitionFunction, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }

    [Export(typeof(KustoQuerier))]
    internal partial class SqlBuiltInTypeQuerier: KustoQuerier
    {
        Type[] supportedTypes = new Type[] { typeof(SystemDataType) };

        public override Type[] SupportedObjectTypes { get { return supportedTypes; } }

        public override  IEnumerable<SqlKustoObject> Query(KustoQueryContext context, string filter, bool refresh, IEnumerable<string> extraProperties)
        {
            Database parentDatabase = context.Parent as Database;
            if (parentDatabase != null)
            {
                var retValue = parentDatabase.Parent.SystemDataTypes;
                if (retValue != null)
                {
                    retValue.ClearAndInitialize(filter, extraProperties);
                    return new KustoCollectionWrapper<SystemDataType>(retValue).Where(c => PassesFinalFilters(parentDatabase, c));
                }
            }
            return Enumerable.Empty<SqlKustoObject>();
        }
    }
}

